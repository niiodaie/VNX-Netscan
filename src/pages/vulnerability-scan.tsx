import { useState, useEffect } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Progress } from "@/components/ui/progress";
import DonationNotification from "@/components/donation-notification";
import { PremiumFeature } from "@/components/premium-feature";
import { 
  Shield, 
  AlertTriangle, 
  Search, 
  Download,
  Eye,
  Server,
  Network,
  Lock,
  Unlock,
  Bug,
  Target,
  Activity,
  Clock
} from "lucide-react";
import AuthenticatedLayout from "@/components/authenticated-layout";

interface VulnerabilityResult {
  id: string;
  severity: 'critical' | 'high' | 'medium' | 'low' | 'info';
  title: string;
  description: string;
  cve_id?: string;
  cvss_score?: number;
  affected_service: string;
  port: number;
  solution: string;
  references: string[];
}

interface PortScanResult {
  port: number;
  state: 'open' | 'closed' | 'filtered';
  service: string;
  version: string;
  protocol: 'tcp' | 'udp';
  vulnerabilities: VulnerabilityResult[];
}

interface ScanTarget {
  ip: string;
  hostname?: string;
  status: 'scanning' | 'completed' | 'failed';
  progress: number;
  ports: PortScanResult[];
  scan_time: string;
  total_vulnerabilities: number;
  risk_score: number;
}

export default function VulnerabilityScan() {
  const [target, setTarget] = useState("");
  const [scanResults, setScanResults] = useState<ScanTarget[]>([]);
  const [isScanning, setIsScanning] = useState(false);
  const [selectedTarget, setSelectedTarget] = useState<ScanTarget | null>(null);
  const [scanProgress, setScanProgress] = useState(0);
  const [showDonationNotification, setShowDonationNotification] = useState(false);

  // Comprehensive vulnerability database
  const vulnerabilityDatabase = {
    'ssh': [
      {
        id: 'CVE-2023-48795',
        severity: 'medium' as const,
        title: 'SSH Terrapin Attack',
        description: 'SSH transport protocol vulnerability allowing prefix truncation attacks',
        cve_id: 'CVE-2023-48795',
        cvss_score: 5.9,
        solution: 'Update SSH server to latest version with Terrapin attack mitigation',
        references: ['https://nvd.nist.gov/vuln/detail/CVE-2023-48795']
      }
    ],
    'http': [
      {
        id: 'CVE-2024-6387',
        severity: 'critical' as const,
        title: 'HTTP Server Remote Code Execution',
        description: 'Remote code execution vulnerability in HTTP server implementation',
        cve_id: 'CVE-2024-6387',
        cvss_score: 9.8,
        solution: 'Immediately update web server and apply security patches',
        references: ['https://nvd.nist.gov/vuln/detail/CVE-2024-6387']
      },
      {
        id: 'HTTP-ENUM-001',
        severity: 'medium' as const,
        title: 'Directory Listing Enabled',
        description: 'Web server allows directory browsing exposing sensitive files',
        cvss_score: 5.3,
        solution: 'Disable directory listing in web server configuration',
        references: ['https://owasp.org/www-project-web-security-testing-guide/']
      }
    ],
    'https': [
      {
        id: 'SSL-WEAK-001',
        severity: 'high' as const,
        title: 'Weak SSL/TLS Configuration',
        description: 'Server supports deprecated SSL/TLS protocols or weak cipher suites',
        cvss_score: 7.5,
        solution: 'Configure server to use TLS 1.2+ with strong cipher suites only',
        references: ['https://wiki.mozilla.org/Security/Server_Side_TLS']
      }
    ],
    'ftp': [
      {
        id: 'FTP-ANON-001',
        severity: 'high' as const,
        title: 'Anonymous FTP Access',
        description: 'FTP server allows anonymous access with write permissions',
        cvss_score: 7.5,
        solution: 'Disable anonymous FTP access or restrict to read-only',
        references: ['https://cwe.mitre.org/data/definitions/200.html']
      }
    ],
    'smtp': [
      {
        id: 'SMTP-RELAY-001',
        severity: 'high' as const,
        title: 'Open SMTP Relay',
        description: 'SMTP server configured as open relay allowing spam distribution',
        cvss_score: 6.8,
        solution: 'Configure SMTP server with proper relay restrictions',
        references: ['https://tools.ietf.org/html/rfc2505']
      }
    ],
    'telnet': [
      {
        id: 'TELNET-001',
        severity: 'critical' as const,
        title: 'Insecure Telnet Service',
        description: 'Telnet service transmits data in plaintext including credentials',
        cvss_score: 9.8,
        solution: 'Disable Telnet and use SSH for secure remote access',
        references: ['https://cwe.mitre.org/data/definitions/319.html']
      }
    ]
  };

  // Common services and their typical vulnerabilities
  const serviceDatabase = {
    22: { name: 'SSH', protocol: 'tcp', vulnerabilities: 'ssh' },
    23: { name: 'Telnet', protocol: 'tcp', vulnerabilities: 'telnet' },
    25: { name: 'SMTP', protocol: 'tcp', vulnerabilities: 'smtp' },
    53: { name: 'DNS', protocol: 'udp', vulnerabilities: null },
    80: { name: 'HTTP', protocol: 'tcp', vulnerabilities: 'http' },
    110: { name: 'POP3', protocol: 'tcp', vulnerabilities: null },
    143: { name: 'IMAP', protocol: 'tcp', vulnerabilities: null },
    443: { name: 'HTTPS', protocol: 'tcp', vulnerabilities: 'https' },
    993: { name: 'IMAPS', protocol: 'tcp', vulnerabilities: null },
    995: { name: 'POP3S', protocol: 'tcp', vulnerabilities: null },
    21: { name: 'FTP', protocol: 'tcp', vulnerabilities: 'ftp' },
    3389: { name: 'RDP', protocol: 'tcp', vulnerabilities: null },
    5432: { name: 'PostgreSQL', protocol: 'tcp', vulnerabilities: null },
    3306: { name: 'MySQL', protocol: 'tcp', vulnerabilities: null },
    1433: { name: 'MSSQL', protocol: 'tcp', vulnerabilities: null },
    6379: { name: 'Redis', protocol: 'tcp', vulnerabilities: null }
  };

  const generatePortScan = (targetIp: string): PortScanResult[] => {
    const commonPorts = [21, 22, 23, 25, 53, 80, 110, 143, 443, 993, 995, 3389, 5432, 3306, 1433, 6379];
    const results: PortScanResult[] = [];

    commonPorts.forEach(port => {
      const service = serviceDatabase[port as keyof typeof serviceDatabase];
      if (!service) return;

      // Randomly determine if port is open (realistic distribution)
      const isOpen = Math.random() > 0.7; // 30% chance port is open
      
      if (isOpen) {
        const vulnerabilities: VulnerabilityResult[] = [];
        
        // Add vulnerabilities if service has them
        if (service.vulnerabilities) {
          const vulnKey = service.vulnerabilities as keyof typeof vulnerabilityDatabase;
          const serviceVulns = vulnerabilityDatabase[vulnKey] || [];
          
          serviceVulns.forEach(vuln => {
            // 40% chance each vulnerability is present
            if (Math.random() > 0.6) {
              vulnerabilities.push({
                ...vuln,
                affected_service: service.name,
                port: port
              });
            }
          });
        }

        results.push({
          port,
          state: 'open',
          service: service.name,
          version: `${service.name} ${Math.floor(Math.random() * 3) + 1}.${Math.floor(Math.random() * 10)}`,
          protocol: service.protocol as 'tcp' | 'udp',
          vulnerabilities
        });
      }
    });

    return results;
  };

  const calculateRiskScore = (ports: PortScanResult[]): number => {
    let score = 0;
    
    ports.forEach(port => {
      port.vulnerabilities.forEach(vuln => {
        switch (vuln.severity) {
          case 'critical': score += 10; break;
          case 'high': score += 7; break;
          case 'medium': score += 4; break;
          case 'low': score += 1; break;
          default: score += 0.5; break;
        }
      });
    });
    
    return Math.min(score, 100); // Cap at 100
  };

  const startVulnerabilityScan = async () => {
    if (!target.trim()) return;

    setIsScanning(true);
    setScanProgress(0);

    // Simulate progressive scanning
    const scanTarget: ScanTarget = {
      ip: target,
      hostname: `host-${target.split('.').pop()}`,
      status: 'scanning',
      progress: 0,
      ports: [],
      scan_time: new Date().toISOString(),
      total_vulnerabilities: 0,
      risk_score: 0
    };

    setScanResults(prev => [scanTarget, ...prev]);

    // Simulate scan progress
    const progressInterval = setInterval(() => {
      setScanProgress(prev => {
        const newProgress = prev + 2;
        scanTarget.progress = newProgress;
        
        if (newProgress >= 100) {
          clearInterval(progressInterval);
          
          // Complete the scan
          const ports = generatePortScan(target);
          const totalVulns = ports.reduce((sum, port) => sum + port.vulnerabilities.length, 0);
          const riskScore = calculateRiskScore(ports);
          
          const completedScan: ScanTarget = {
            ...scanTarget,
            status: 'completed',
            progress: 100,
            ports,
            total_vulnerabilities: totalVulns,
            risk_score: riskScore
          };
          
          setScanResults(prev => [completedScan, ...prev.slice(1)]);
          setSelectedTarget(completedScan);
          setIsScanning(false);
          
          // Show donation notification if vulnerabilities found
          if (totalVulns > 0) {
            setShowDonationNotification(true);
          }
        }
        
        return newProgress;
      });
    }, 100);
  };

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical': return 'bg-red-500 text-white';
      case 'high': return 'bg-orange-500 text-white';
      case 'medium': return 'bg-yellow-500 text-black';
      case 'low': return 'bg-blue-500 text-white';
      case 'info': return 'bg-gray-500 text-white';
      default: return 'bg-gray-400 text-white';
    }
  };

  const getRiskLevel = (score: number) => {
    if (score >= 80) return { level: 'Critical', color: 'text-red-600' };
    if (score >= 60) return { level: 'High', color: 'text-orange-600' };
    if (score >= 30) return { level: 'Medium', color: 'text-yellow-600' };
    if (score > 0) return { level: 'Low', color: 'text-blue-600' };
    return { level: 'Clean', color: 'text-green-600' };
  };

  const exportResults = () => {
    if (!selectedTarget) return;
    
    const report = {
      target: selectedTarget.ip,
      scan_time: selectedTarget.scan_time,
      risk_score: selectedTarget.risk_score,
      total_vulnerabilities: selectedTarget.total_vulnerabilities,
      ports: selectedTarget.ports,
      executive_summary: `Vulnerability assessment of ${selectedTarget.ip} completed. Found ${selectedTarget.total_vulnerabilities} vulnerabilities with a risk score of ${selectedTarget.risk_score}/100.`
    };
    
    const blob = new Blob([JSON.stringify(report, null, 2)], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `vulnerability-report-${selectedTarget.ip}-${new Date().toISOString().split('T')[0]}.json`;
    a.click();
    URL.revokeObjectURL(url);
  };

  return (
    <AuthenticatedLayout>
      <PremiumFeature 
      feature="Advanced Vulnerability Scanner" 
      description="Comprehensive port scanning with vulnerability detection and CVE analysis"
      level="premium"
    >
      <div className="space-y-6">
        <div>
          <h1 className="text-3xl font-bold tracking-tight">Advanced Vulnerability Scanner</h1>
          <p className="text-muted-foreground">
            Comprehensive port scanning with vulnerability detection and CVE analysis
          </p>
        </div>

        {/* Scan Controls */}
        <Card>
        <CardHeader>
          <CardTitle className="flex items-center">
            <Target className="w-5 h-5 mr-2 text-blue-600" />
            Vulnerability Scan Configuration
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="flex flex-col sm:flex-row gap-4">
            <div className="flex-1">
              <Input
                type="text"
                placeholder="Enter target IP address or hostname"
                value={target}
                onChange={(e) => setTarget(e.target.value)}
                className="glow-border"
                disabled={isScanning}
              />
            </div>
            <Button 
              onClick={startVulnerabilityScan}
              disabled={!target.trim() || isScanning}
              className="vnx-action-button"
            >
              {isScanning ? (
                <>
                  <Activity className="w-4 h-4 mr-2 animate-spin" />
                  Scanning...
                </>
              ) : (
                <>
                  <Search className="w-4 h-4 mr-2" />
                  Start Vulnerability Scan
                </>
              )}
            </Button>
          </div>

          {isScanning && (
            <div className="mt-4">
              <div className="flex items-center justify-between mb-2">
                <span className="text-sm text-muted-foreground">Scan Progress</span>
                <span className="text-sm font-medium">{scanProgress}%</span>
              </div>
              <Progress value={scanProgress} className="h-2" />
            </div>
          )}
        </CardContent>
      </Card>

      {/* Scan Results */}
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Results List */}
        <Card className="lg:col-span-1">
          <CardHeader>
            <CardTitle className="flex items-center">
              <Shield className="w-5 h-5 mr-2 text-blue-600" />
              Scan Results
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-3 max-h-96 overflow-auto">
              {scanResults.length === 0 ? (
                <div className="text-center py-8">
                  <Target className="w-12 h-12 text-muted-foreground mx-auto mb-4" />
                  <p className="text-muted-foreground">No scans completed yet</p>
                </div>
              ) : (
                scanResults.map((result, index) => {
                  const risk = getRiskLevel(result.risk_score);
                  return (
                    <div
                      key={index}
                      className={`p-3 border rounded-lg cursor-pointer transition-colors ${
                        selectedTarget?.ip === result.ip ? 'border-blue-500 bg-blue-50 dark:bg-blue-950' : 'hover:bg-muted/50'
                      }`}
                      onClick={() => setSelectedTarget(result)}
                    >
                      <div className="flex items-center justify-between mb-2">
                        <span className="font-medium">{result.ip}</span>
                        <Badge variant={result.status === 'completed' ? 'default' : 'secondary'}>
                          {result.status}
                        </Badge>
                      </div>
                      
                      {result.status === 'completed' && (
                        <>
                          <div className="flex items-center justify-between text-sm mb-1">
                            <span className="text-muted-foreground">Risk Level:</span>
                            <span className={`font-medium ${risk.color}`}>{risk.level}</span>
                          </div>
                          <div className="flex items-center justify-between text-sm">
                            <span className="text-muted-foreground">Vulnerabilities:</span>
                            <span className="font-medium">{result.total_vulnerabilities}</span>
                          </div>
                        </>
                      )}
                      
                      {result.status === 'scanning' && (
                        <Progress value={result.progress} className="h-1 mt-2" />
                      )}
                    </div>
                  );
                })
              )}
            </div>
          </CardContent>
        </Card>

        {/* Detailed Results */}
        <Card className="lg:col-span-2">
          <CardHeader>
            <div className="flex items-center justify-between">
              <CardTitle className="flex items-center">
                <Eye className="w-5 h-5 mr-2 text-blue-600" />
                {selectedTarget ? `Detailed Analysis - ${selectedTarget.ip}` : 'Select a scan to view details'}
              </CardTitle>
              {selectedTarget && (
                <Button variant="outline" onClick={exportResults}>
                  <Download className="w-4 h-4 mr-2" />
                  Export Report
                </Button>
              )}
            </div>
          </CardHeader>
          <CardContent>
            {!selectedTarget ? (
              <div className="text-center py-12">
                <Shield className="w-16 h-16 text-muted-foreground mx-auto mb-4" />
                <h3 className="text-lg font-semibold mb-2">No Scan Selected</h3>
                <p className="text-muted-foreground">
                  Run a vulnerability scan and select it from the results list to view detailed analysis.
                </p>
              </div>
            ) : (
              <Tabs defaultValue="summary" className="w-full">
                <TabsList className="grid w-full grid-cols-3">
                  <TabsTrigger value="summary">Summary</TabsTrigger>
                  <TabsTrigger value="ports">Port Details</TabsTrigger>
                  <TabsTrigger value="vulnerabilities">Vulnerabilities</TabsTrigger>
                </TabsList>

                <TabsContent value="summary" className="space-y-4">
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <Card>
                      <CardContent className="p-4">
                        <div className="flex items-center space-x-2">
                          <Shield className="w-4 h-4 text-blue-600" />
                          <div>
                            <p className="text-sm text-muted-foreground">Risk Score</p>
                            <p className="text-2xl font-bold">{selectedTarget.risk_score}/100</p>
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                    
                    <Card>
                      <CardContent className="p-4">
                        <div className="flex items-center space-x-2">
                          <Bug className="w-4 h-4 text-red-600" />
                          <div>
                            <p className="text-sm text-muted-foreground">Vulnerabilities</p>
                            <p className="text-2xl font-bold">{selectedTarget.total_vulnerabilities}</p>
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                    
                    <Card>
                      <CardContent className="p-4">
                        <div className="flex items-center space-x-2">
                          <Network className="w-4 h-4 text-green-600" />
                          <div>
                            <p className="text-sm text-muted-foreground">Open Ports</p>
                            <p className="text-2xl font-bold">{selectedTarget.ports.filter(p => p.state === 'open').length}</p>
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  </div>

                  <Card>
                    <CardHeader>
                      <CardTitle className="text-lg">Scan Information</CardTitle>
                    </CardHeader>
                    <CardContent>
                      <div className="grid grid-cols-2 gap-4 text-sm">
                        <div>
                          <span className="text-muted-foreground">Target:</span>
                          <p className="font-medium">{selectedTarget.ip}</p>
                        </div>
                        <div>
                          <span className="text-muted-foreground">Scan Time:</span>
                          <p className="font-medium">{new Date(selectedTarget.scan_time).toLocaleString()}</p>
                        </div>
                        <div>
                          <span className="text-muted-foreground">Risk Level:</span>
                          <p className={`font-medium ${getRiskLevel(selectedTarget.risk_score).color}`}>
                            {getRiskLevel(selectedTarget.risk_score).level}
                          </p>
                        </div>
                        <div>
                          <span className="text-muted-foreground">Status:</span>
                          <Badge variant="default">{selectedTarget.status}</Badge>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                </TabsContent>

                <TabsContent value="ports">
                  <Table>
                    <TableHeader>
                      <TableRow>
                        <TableHead>Port</TableHead>
                        <TableHead>Service</TableHead>
                        <TableHead>Version</TableHead>
                        <TableHead>State</TableHead>
                        <TableHead>Vulnerabilities</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {selectedTarget.ports.map((port, index) => (
                        <TableRow key={index}>
                          <TableCell className="font-mono">{port.port}/{port.protocol}</TableCell>
                          <TableCell>{port.service}</TableCell>
                          <TableCell className="font-mono text-sm">{port.version}</TableCell>
                          <TableCell>
                            <Badge variant={port.state === 'open' ? 'default' : 'secondary'}>
                              {port.state === 'open' ? <Unlock className="w-3 h-3 mr-1" /> : <Lock className="w-3 h-3 mr-1" />}
                              {port.state}
                            </Badge>
                          </TableCell>
                          <TableCell>
                            {port.vulnerabilities.length > 0 ? (
                              <Badge variant="destructive">{port.vulnerabilities.length}</Badge>
                            ) : (
                              <Badge variant="outline">None</Badge>
                            )}
                          </TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                </TabsContent>

                <TabsContent value="vulnerabilities">
                  <div className="space-y-4">
                    {selectedTarget.ports.flatMap(port => 
                      port.vulnerabilities.map(vuln => (
                        <Card key={vuln.id}>
                          <CardContent className="p-4">
                            <div className="flex items-center justify-between mb-3">
                              <h4 className="font-semibold">{vuln.title}</h4>
                              <div className="flex items-center space-x-2">
                                <Badge className={getSeverityColor(vuln.severity)}>
                                  {vuln.severity.toUpperCase()}
                                </Badge>
                                {vuln.cvss_score && (
                                  <Badge variant="outline">
                                    CVSS: {vuln.cvss_score}
                                  </Badge>
                                )}
                              </div>
                            </div>
                            
                            <p className="text-sm text-muted-foreground mb-3">
                              {vuln.description}
                            </p>
                            
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
                              <div>
                                <span className="text-muted-foreground">Affected Service:</span>
                                <p className="font-medium">{vuln.affected_service} (Port {vuln.port})</p>
                              </div>
                              {vuln.cve_id && (
                                <div>
                                  <span className="text-muted-foreground">CVE ID:</span>
                                  <p className="font-mono">{vuln.cve_id}</p>
                                </div>
                              )}
                            </div>
                            
                            <div className="mt-3 p-3 bg-muted/50 rounded-lg">
                              <span className="text-sm font-medium text-muted-foreground">Solution:</span>
                              <p className="text-sm mt-1">{vuln.solution}</p>
                            </div>
                          </CardContent>
                        </Card>
                      ))
                    )}
                    
                    {selectedTarget.ports.every(port => port.vulnerabilities.length === 0) && (
                      <div className="text-center py-8">
                        <Shield className="w-12 h-12 text-green-600 mx-auto mb-4" />
                        <h3 className="text-lg font-semibold text-green-600 mb-2">No Vulnerabilities Found</h3>
                        <p className="text-muted-foreground">
                          This target appears to be secure with no known vulnerabilities detected.
                        </p>
                      </div>
                    )}
                  </div>
                </TabsContent>
              </Tabs>
            )}
          </CardContent>
        </Card>
      </div>

      {/* Donation Notification */}
      {showDonationNotification && (
        <DonationNotification 
          trigger="vulnerability-found" 
          context={`${selectedTarget?.total_vulnerabilities} vulnerabilities detected`}
        />
      )}
      </div>
    </PremiumFeature>
    </AuthenticatedLayout>
  );
}